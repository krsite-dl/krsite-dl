name: Create Tag

on:
  workflow_call:
    outputs:
      new_tag:
        description: "The newly created SemVer tag"
        value: ${{ jobs.tag.outputs.new_tag }}

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create SemVer Tag
        id: create_tag
        run: |
          # Get the latest tag, or set to 0.0.0 if no tags exist
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Latest tag is $latest_tag"

          # Get commit messages since the last tag
          if [ "$latest_tag" = "0.0.0" ]; then
            # If no tags exist, get all commits
            commits=$(git log --pretty=%s)
          else
            commits=$(git log $latest_tag..HEAD --pretty=%s)
          fi
          if [ -z "$commits" ]; then
            echo "No new commits since last tag. Nothing to do."
            exit 0
          fi

          # Determine the type of version bump
          bump="patch"
          while IFS= read -r commit; do
            if echo "$commit" | grep -q "BREAKING CHANGE"; then
              bump="major"
              break
            fi
            if echo "$commit" | grep -q "feat:"; then
              bump="minor"
            fi
          done <<< "$commits"
          echo "Bumping $bump version."

          # Remove 'v' prefix if it exists and split into parts
          version_no_v=${latest_tag#v}
          version_parts=(${version_no_v//./ })
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          # Increment the correct part
          if [ "$bump" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_tag="${major}.${minor}.${patch}"
          echo "New tag is $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Push new tag to repository
        if: steps.create_tag.outputs.new_tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.create_tag.outputs.new_tag }}
          git push origin ${{ steps.create_tag.outputs.new_tag }}
