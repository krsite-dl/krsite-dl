name: Create Reusable Tag

on:
  workflow_call:
    inputs:
      release_type:
        description: "The type of release to create (release or prerelease)"
        required: true
        type: string
    outputs:
      new_tag:
        description: "The newly created SemVer tag"
        value: ${{ jobs.tag.outputs.new_tag }}

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create SemVer Tag based on release type
        id: create_tag
        run: |
          #!/bin/bash
          # This script now handles stable and pre-release versions.
          # It finds the latest stable tag to correctly calculate the next version.
          latest_stable_tag=$(git tag --list '[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)

          if [ -z "$latest_stable_tag" ]; then
            echo "No stable tags found, starting with 0.1.0"
            base_tag="0.1.0"
          else
            echo "Latest stable tag is $latest_stable_tag"
            commits=$(git log ${latest_stable_tag}..HEAD --oneline)

            major=$(echo $latest_stable_tag | cut -d. -f1)
            minor=$(echo $latest_stable_tag | cut -d. -f2)
            patch=$(echo $latest_stable_tag | cut -d. -f3)

            if echo "$commits" | grep -q -E "(BREAKING CHANGE)|(!)"; then
              major=$((major + 1))
              minor=0
              patch=0
            elif echo "$commits" | grep -q "(feat)"; then
              minor=$((minor + 1))
              patch=0
            elif echo "$commits" | grep -q "(fix)"; then
              patch=$((patch + 1))
            else
              patch=$((patch + 1))
            fi
            base_tag="${major}.${minor}.${patch}"
          fi

          echo "Calculated base version: $base_tag"

          if [ "${{ inputs.release_type }}" == "prerelease" ]; then
            echo "Creating a pre-release."
            # Find the number of existing pre-releases for this base version
            prerelease_count=$(git tag -l "${base_tag}-rc.*" | wc -l)
            new_tag="${base_tag}-rc.${prerelease_count}"
          else
            echo "Creating a stable release."
            new_tag="$base_tag"
          fi

          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Push new tag to repository
        if: steps.create_tag.outputs.new_tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.create_tag.outputs.new_tag }}
          git push origin ${{ steps.create_tag.outputs.new_tag }}
