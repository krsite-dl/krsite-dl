name: Create Reusable Tag

on:
  workflow_call:
    outputs:
      new_tag:
        description: "The newly created SemVer tag"
        value: ${{ jobs.tag.outputs.new_tag }}

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create SemVer Tag
        id: create_tag
        run: |
          # Get the latest tag, or set to 0.0.0 if no tags exist
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Latest tag is $latest_tag"

          # Get full commit messages since the last tag
          if [ "$latest_tag" = "0.0.0" ]; then
            all_commits_raw=$(git log --pretty=format:'%B%n---COMMIT-SEPARATOR---')
          else
            all_commits_raw=$(git log $latest_tag..HEAD --pretty=format:'%B%n---COMMIT-SEPARATOR---')
          fi

          # Split raw commits into individual commit messages
          IFS='---COMMIT-SEPARATOR---' read -ra commits_array <<< "$all_commits_raw"

          # Determine the type of version bump
          bump="patch"
          for commit_message in "${commits_array[@]}"; do
            # Trim whitespace and empty lines
            commit_message=$(echo "$commit_message" | sed '/^\s*$/d')
            if [ -z "$commit_message" ]; then
              continue
            fi

            # Get the first line (subject)
            first_line=$(echo "$commit_message" | head -n 1)

            # Check for BREAKING CHANGE in the entire commit message (subject or body)
            if echo "$commit_message" | grep -q "BREAKING CHANGE"; then
              bump="major"
              break # Major bump takes precedence
            fi

            # Check for breaking change in subject (e.g., feat!: subject)
            if echo "$first_line" | grep -q "!:"; then
              bump="major"
              break # Major bump takes precedence
            fi

            # Check for feat: in the subject line
            if echo "$first_line" | grep -q "^feat:"; then
              # Only set to minor if it's not already major
              if [ "$bump" != "major" ]; then
                bump="minor"
              fi
            fi
          done

          # Remove 'v' prefix if it exists and split into parts
          version_no_v=${latest_tag#v}
          version_parts=(${version_no_v//./ })
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          # Increment the correct part
          if [ "$bump" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_tag="${major}.${minor}.${patch}"
          echo "New tag is $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Push new tag to repository
        if: steps.create_tag.outputs.new_tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.create_tag.outputs.new_tag }}
          git push origin ${{ steps.create_tag.outputs.new_tag }}
