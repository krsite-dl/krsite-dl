name: Create Reusable Tag

on:
  workflow_call:
    outputs:
      new_tag:
        description: "The newly created SemVer tag"
        value: ${{ jobs.tag.outputs.new_tag }}

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create SemVer Tag
        id: create_tag
        run: |
          # Get the latest tag, or set to 0.0.0 if no tags exist
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Latest tag is $latest_tag"

          # Get full commit messages since the last tag, separated by a null character
          # Use %x00 for the null character separator
          if [ "$latest_tag" = "0.0.0" ]; then
            commit_messages=$(git log --pretty=format:'%B%x00')
          else
            commit_messages=$(git log $latest_tag..HEAD --pretty=format:'%B%x00')
          fi

          # Determine the type of version bump
          bump="patch"
          # Use a while loop to read null-delimited messages
          while IFS= read -r -d '' message; do
            echo "---"
            echo "Analyzing commit: "
            echo "$message"
            echo "---"
            if echo "$message" | grep -q "BREAKING CHANGE" || echo "$message" | grep -qE "^[a-z]+\(.*\)!:"; then
              bump="major"
              break # Major bump takes precedence, no need to check further
            fi
            if echo "$message" | grep -qE "^feat(\(.*\))?:"; then
              # Only set to minor if it's not already major
              if [ "$bump" != "major" ]; then
                bump="minor"
              fi
            fi
          done <<< "$commit_messages"

          echo "Determined bump type is: $bump"

          # Remove 'v' prefix if it exists and split into parts
          version_no_v=${latest_tag#v}
          IFS='.' read -ra version_parts <<< "$version_no_v"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          # Increment the correct part
          case "$bump" in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            *)
              patch=$((patch + 1))
              ;;
          esac

          # Add the new tag
          new_tag="${major}.${minor}.${patch}"
          echo "New tag will be: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Push new tag to repository
        if: steps.create_tag.outputs.new_tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.create_tag.outputs.new_tag }}
          git push origin ${{ steps.create_tag.outputs.new_tag }}
